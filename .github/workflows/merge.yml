name: Deploy new docker image

on:
  push:
    branches: ['master']

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  BUILD_PATH: ./scripts/build-uberjar-app.sh

jobs:
#  test:
#    name: Build, test, poly check
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#      - name: Setup Clojure
#        uses: DeLaGuardo/setup-clojure@3.6
#        with:
#          cli: latest
#      - name: Cache deps
#        uses: actions/cache@v2
#        id: deps-cache
#        with:
#          path: |
#            ~/.polylith
#            ~/.m2
#            ~/.gitlibs
#            ~/.clojure
#          key: ${{ runner.os }}-maven-${{ hashFiles('deps.edn') }}
#          restore-keys: |
#            ${{ runner.os }}-maven-
#            ${{ runner.os }}-
#      - name: Create polylith config
#        run: mkdir -p ~/.polylith && echo "{}" > ~/.polylith/config.edn
#      - name: Check Polylith workspace
#        run: clojure -A:poly check
#      - name: Run tests for polylith workspace
#        if: success()
#        run: clojure -A:poly test :project

  docker-publish:
    name: Publish docker image
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Load cached deps
        uses: actions/cache@v2
        id: deps-cache
        with:
          path: |
            ~/.polylith
            ~/.m2
            ~/.gitlibs
            ~/.clojure
          key: ${{ runner.os }}-maven-${{ hashFiles('deps.edn') }}
      - name: Setup Clojure
        uses: DeLaGuardo/setup-clojure@3.6
        with:
          cli: latest
      - name: Make executeable
        run: chmod +x ${{ env.BUILD_PATH }}
      - name: Create uberjar
        run: ${{ env.BUILD_PATH }}
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: ./projects/realworld-backend
          file: projects/realworld-backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}